generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String              @id @default(cuid())
  name           String?
  email          String?             @unique
  phoneNumber    String?             @unique
  openedTickets  Ticket[]            @relation("openedBy")
  claimedTickets Ticket[]            @relation("claimedBy")
  tickets        Ticket[]
  fridges        Fridge[]
  subscriptions  Subscription[]
  profileImages  UserProfileImages[]
  images         Image[]             @relation("userImages")
}

model Fridge {
  id            String         @id @default(cuid())
  tickets       Ticket[]
  users         User[]
  status        Boolean        @default(true)
  openTickets   Boolean        @default(false)
  subscriptions Subscription[]
  latitude      Float
  longitude     Float
  streetAddress String
  zipCode       Int
  neighborhood  String?
  fridgeImages  FridgeImages[]
  mainImageId   String?
}

model Ticket {
  id          String      @id @default(cuid())
  serviceType serviceType
  openedBy    User        @relation(name: "openedBy", fields: [openedById], references: [id])
  openedById  String
  claimedBy   User[]      @relation("claimedBy")
  closedBy    User?       @relation(fields: [closedById], references: [id])
  closedById  String
  isOpen      Boolean     @default(true)
  fridge      Fridge      @relation(fields: [fridgeId], references: [id])
  fridgeId    String
}

model Subscription {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  fridge         Fridge  @relation(fields: [fridgeId], references: [id])
  fridgeId       String
  foodAdded      Boolean @default(false)
  maintenance    Boolean @default(false)
  cleaning       Boolean @default(false)
  foodAction     Boolean @default(false)
  transportation Boolean @default(false)
  misc           Boolean @default(false)
}

model Image {
  id        String    @id @default(cuid())
  url       String
  caption   String?
  addedBy   User      @relation("userImages", fields: [addedById], references: [id])
  addedById String    @unique
  type      imageType
  userProfileImages UserProfileImages[]
  fridgeImages FridgeImages[]
}

model UserProfileImages {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  image     Image   @relation(fields: [imageId], references: [id])
  imageId   String
  isCurrent Boolean @default(false)
}

model FridgeImages {
  id        String          @id @default(cuid())
  fridge    Fridge          @relation(fields: [fridgeId], references: [id])
  fridgeId  String
  image     Image           @relation(fields: [imageId], references: [id])
  imageId   String
  type      FridgeImageType @default(OTHER)
  isCurrent Boolean         @default(false)
}

enum serviceType {
  FOODACTION
  MAINTENANCE
  CLEANING
  TRANSPORTATION
  MISC
}

enum imageType {
  USER
  FRIDGE
  OTHER
}

enum FridgeImageType {
  INSIDE
  OUTSIDE
  OTHER
}
